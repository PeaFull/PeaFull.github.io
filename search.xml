<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>总会好起来的，不是吗？</title>
      <link href="/2024/07/10/someTalkingShit/"/>
      <url>/2024/07/10/someTalkingShit/</url>
      
        <content type="html"><![CDATA[<h3 id="假如生活欺骗了你，"><a href="#假如生活欺骗了你，" class="headerlink" title="假如生活欺骗了你，"></a><center>假如生活欺骗了你，</center></h3><span id="more"></span><h3 id="不要悲伤，不要心急！"><a href="#不要悲伤，不要心急！" class="headerlink" title="不要悲伤，不要心急！"></a><center>不要悲伤，不要心急！</center></h3><h3 id="忧郁的日子里须要镇静："><a href="#忧郁的日子里须要镇静：" class="headerlink" title="忧郁的日子里须要镇静："></a><center>忧郁的日子里须要镇静：</center></h3><h3 id="相信吧，快乐的日子将会来临！"><a href="#相信吧，快乐的日子将会来临！" class="headerlink" title="相信吧，快乐的日子将会来临！"></a><center>相信吧，快乐的日子将会来临！</center></h3><h3 id="心儿永远向往着未来；"><a href="#心儿永远向往着未来；" class="headerlink" title="心儿永远向往着未来；"></a><center>心儿永远向往着未来；</center></h3><h3 id="现在却常是忧郁。"><a href="#现在却常是忧郁。" class="headerlink" title="现在却常是忧郁。"></a><center>现在却常是忧郁。</center></h3><h3 id="一切都是瞬息，一切都将会过去；"><a href="#一切都是瞬息，一切都将会过去；" class="headerlink" title="一切都是瞬息，一切都将会过去；"></a><center>一切都是瞬息，一切都将会过去；</center></h3><h3 id="而那过去了的，就会成为亲切的怀恋。"><a href="#而那过去了的，就会成为亲切的怀恋。" class="headerlink" title="而那过去了的，就会成为亲切的怀恋。"></a><center>而那过去了的，就会成为亲切的怀恋。</center></h3><h3 id=""><a href="#" class="headerlink" title=""></a><br/></h3><h3 id="总会好起来的，不是吗？"><a href="#总会好起来的，不是吗？" class="headerlink" title="总会好起来的，不是吗？"></a><center>总会好起来的，不是吗？</center></h3><img src="/2024/07/10/someTalkingShit/image.png" class="" title="Everything will be all right.">]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分析ios闪退日志的简易方法</title>
      <link href="/2019/05/08/iosCrashAnalyse/"/>
      <url>/2019/05/08/iosCrashAnalyse/</url>
      
        <content type="html"><![CDATA[<ol><li>首先在打包机上找到dSYM文件，每次发布都会被覆盖为最新的，具体目录为jenkins对应的pipeline下platform&#x2F;ios&#x2F;build&#x2F;device&#x2F;，拷贝至桌面方便操作；</li><li>将设备链接至mac，在xcode的window-&gt;devices and simulators-&gt;下点击view device logs，在this device下等待所有的日志加载好后点击type排序，在对应的app里找到闪退时间一致的闪退日志，查看日志；<span id="more"></span></li><li>对比闪退日志和dSYM日志的uuid，确认dSYM文件，在桌面执行命令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dwarfdump --uuid SogalNew.app.dSYM</span><br></pre></td></tr></table></figure>解析dSYM文件的uuid，输出结果如下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UUID: 89E89BFC-43CE-3BC6-8D16-07C24394B0DB (armv7)</span><br><span class="line">dSYMs/SogalNew.app.dSYM/Contents/Resources/DWARF/SogalNew</span><br><span class="line">UUID: 101C2198-E694-3D3A-9BC6-F7A30D4451EF (arm64)</span><br><span class="line">dSYMs/SogalNew.app.dSYM/Contents/Resources/DWARF/SogalNew</span><br></pre></td></tr></table></figure>在闪退日志里找到如下一行，对比&lt;&gt;里的uuid，在确保都为arm64时如果一致代表dSYM文件可以用<img src="/2019/05/08/iosCrashAnalyse/uuid.png" class="" title="uuid"></li><li>在桌面执行如下命令，开始解析闪退日志：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Applications/Xcode.app/Contents/Developer/usr/bin/atos -o SogalNew.app.dSYM/Contents/Resources/DWARF/SogalNew -l 0x100084000 -arch arm64</span><br></pre></td></tr></table></figure>其中0x100084000与<img src="/2019/05/08/iosCrashAnalyse/uuid1.png" class="" title="uuid1">及<img src="/2019/05/08/iosCrashAnalyse/uuid2.png" class="" title="uuid2">一致</li><li>接下来输入闪退日志里前几句<img src="/2019/05/08/iosCrashAnalyse/uuid3.png" class="" title="uuid3">进行解析即可看到大致报错位置。</li></ol><p>注：SogalNew指应用名称</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序开发笔记</title>
      <link href="/2018/11/28/weapp/"/>
      <url>/2018/11/28/weapp/</url>
      
        <content type="html"><![CDATA[<h2 id="在小程序里如何关注公众号（公众号如何关联小程序）"><a href="#在小程序里如何关注公众号（公众号如何关联小程序）" class="headerlink" title="在小程序里如何关注公众号（公众号如何关联小程序）"></a>在小程序里如何关注公众号（公众号如何关联小程序）</h2><h4 id="首先你需要在公众号里给小程序发送一个关联邀请，如下图："><a href="#首先你需要在公众号里给小程序发送一个关联邀请，如下图：" class="headerlink" title="首先你需要在公众号里给小程序发送一个关联邀请，如下图："></a>首先你需要在公众号里给小程序发送一个关联邀请，如下图：</h4><img src="/2018/11/28/weapp/yaoqing.png" class="" title="yaoqing"><h4 id="发送之后小程序的管理员会在微信端收到一条邀请通知，点开消息之后点击确认就行，如下图："><a href="#发送之后小程序的管理员会在微信端收到一条邀请通知，点开消息之后点击确认就行，如下图：" class="headerlink" title="发送之后小程序的管理员会在微信端收到一条邀请通知，点开消息之后点击确认就行，如下图："></a>发送之后小程序的管理员会在微信端收到一条邀请通知，点开消息之后点击确认就行，如下图：</h4><span id="more"></span><h4 id="上一步之后公众号关联小程序已经完成，接下来是如何在小程序里关注公众号，在小程序后台需要打开公众号关注组件的开关："><a href="#上一步之后公众号关联小程序已经完成，接下来是如何在小程序里关注公众号，在小程序后台需要打开公众号关注组件的开关：" class="headerlink" title="上一步之后公众号关联小程序已经完成，接下来是如何在小程序里关注公众号，在小程序后台需要打开公众号关注组件的开关："></a>上一步之后公众号关联小程序已经完成，接下来是如何在小程序里关注公众号，在小程序后台需要打开公众号关注组件的开关：</h4><img src="/2018/11/28/weapp/beiyaoqing.png" class="" title="beiyaoqing"><h4 id="直接在页面上使用这个组件即可，效果如下："><a href="#直接在页面上使用这个组件即可，效果如下：" class="headerlink" title="直接在页面上使用这个组件即可&lt;official-account&gt;&lt;/official-account&gt;，效果如下："></a>直接在页面上使用这个组件即可<code>&lt;official-account&gt;&lt;/official-account&gt;</code>，效果如下：</h4><h4 id="要注意的是这个组件只有在下面四个场景下才能展示，其中第三个场景是用户使用较多的，但是如果小程序在后台放置一段时间后会被销毁，再次打开也不会看到，只能从新扫描二维码，还是比较鸡肋的。"><a href="#要注意的是这个组件只有在下面四个场景下才能展示，其中第三个场景是用户使用较多的，但是如果小程序在后台放置一段时间后会被销毁，再次打开也不会看到，只能从新扫描二维码，还是比较鸡肋的。" class="headerlink" title="要注意的是这个组件只有在下面四个场景下才能展示，其中第三个场景是用户使用较多的，但是如果小程序在后台放置一段时间后会被销毁，再次打开也不会看到，只能从新扫描二维码，还是比较鸡肋的。"></a>要注意的是这个组件只有在下面四个场景下才能展示，其中第三个场景是用户使用较多的，但是如果小程序在后台放置一段时间后会被销毁，再次打开也不会看到，只能从新扫描二维码，还是比较鸡肋的。</h4><img src="/2018/11/28/weapp/changjing.png" class="" title="changjing"><hr><h2 id="小程序的开发版和体验版"><a href="#小程序的开发版和体验版" class="headerlink" title="小程序的开发版和体验版"></a>小程序的开发版和体验版</h2><h4 id="开发版："><a href="#开发版：" class="headerlink" title="开发版："></a>开发版：</h4><p>扫描开发者工具里预览的二维码打开的小程序就是开发版，每次修改完代码之后需要点击预览生成一个新的二维码查看，用户需要在后台配置开发者权限。</p><h4 id="体验版："><a href="#体验版：" class="headerlink" title="体验版："></a>体验版：</h4><p>体验版相对于开发版的好处是只需扫描一个二维码，之后在最近使用中打开即可。修改了代码之后上传代码，也会自动覆盖之前的，不需要再次扫描二维码，方法如下：</p><ol><li>首先需要在开发者工具里输入小程序的appid（创建项目的时候可以填，创建好的项目在详情里也可以修改）进行关联，接着上传代码：<img src="/2018/11/28/weapp/upload.png" class="" title="upload"></li><li>上传成功之后在小程序后台的开发管理就能看到上传记录，点击选为体验版本：<img src="/2018/11/28/weapp/tiyan.png" class="" title="tiyan"></li><li>用户需要在后台配置体验者权限，扫描体验版二维码即可。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一些零散的知识点</title>
      <link href="/2018/08/06/notes/"/>
      <url>/2018/08/06/notes/</url>
      
        <content type="html"><![CDATA[<h3 id="1、JS的for-in循环可以用来遍历对象，用在取用对象中不确定的属性名。"><a href="#1、JS的for-in循环可以用来遍历对象，用在取用对象中不确定的属性名。" class="headerlink" title="1、JS的for in循环可以用来遍历对象，用在取用对象中不确定的属性名。"></a>1、JS的for in循环可以用来遍历对象，用在取用对象中不确定的属性名。</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">fname</span>:<span class="string">&quot;John&quot;</span>, <span class="attr">lname</span>:<span class="string">&quot;Doe&quot;</span>, <span class="attr">age</span>:<span class="number">25</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> text = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> person) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(text += person[key] + <span class="string">&quot; &quot;</span>);<span class="comment">//John Doe 25</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="2、JS中substring与substr的区别"><a href="#2、JS中substring与substr的区别" class="headerlink" title="2、JS中substring与substr的区别"></a>2、JS中substring与substr的区别</h3><h4 id="共同点是都有两个参数，第一个参数的含义都一样，区别是第二个参数：substring为截取到第几位，substr是截取几位，如下："><a href="#共同点是都有两个参数，第一个参数的含义都一样，区别是第二个参数：substring为截取到第几位，substr是截取几位，如下：" class="headerlink" title="共同点是都有两个参数，第一个参数的含义都一样，区别是第二个参数：substring为截取到第几位，substr是截取几位，如下："></a>共同点是都有两个参数，第一个参数的含义都一样，区别是第二个参数：substring为截取到第几位，substr是截取几位，如下：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">text.<span class="title function_">substr</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">//el</span></span><br><span class="line">text.<span class="title function_">substring</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">//e</span></span><br></pre></td></tr></table></figure><h3 id="3、Navigator对象的platform和userAgent区别"><a href="#3、Navigator对象的platform和userAgent区别" class="headerlink" title="3、Navigator对象的platform和userAgent区别"></a>3、Navigator对象的platform和userAgent区别</h3><h4 id="platform用于判断操作系统平台，例如："><a href="#platform用于判断操作系统平台，例如：" class="headerlink" title="platform用于判断操作系统平台，例如："></a>platform用于判断操作系统平台，例如：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> platform = navigator.<span class="property">platform</span>.<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (platform === <span class="string">&quot;Win&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">//windows</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (platform === <span class="string">&quot;Mac&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">//macOS</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="UserAgent中文名为用户代理，是Http协议中的一部分，属于头域的组成部分，UserAgent也简称UA。它是一个特殊字符串头，是一种向访问网站提供你所使用的浏览器类型及版本、操作系统及版本、浏览器内核、等信息的标识，一般用于区分用户浏览器的类型及版本，例如："><a href="#UserAgent中文名为用户代理，是Http协议中的一部分，属于头域的组成部分，UserAgent也简称UA。它是一个特殊字符串头，是一种向访问网站提供你所使用的浏览器类型及版本、操作系统及版本、浏览器内核、等信息的标识，一般用于区分用户浏览器的类型及版本，例如：" class="headerlink" title="UserAgent中文名为用户代理，是Http协议中的一部分，属于头域的组成部分，UserAgent也简称UA。它是一个特殊字符串头，是一种向访问网站提供你所使用的浏览器类型及版本、操作系统及版本、浏览器内核、等信息的标识，一般用于区分用户浏览器的类型及版本，例如："></a>UserAgent中文名为用户代理，是Http协议中的一部分，属于头域的组成部分，UserAgent也简称UA。它是一个特殊字符串头，是一种向访问网站提供你所使用的浏览器类型及版本、操作系统及版本、浏览器内核、等信息的标识，一般用于区分用户浏览器的类型及版本，例如：</h4><p>&#x2F;&#x2F;判断IE浏览器版本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">IEVersion</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> userAgent = navigator.<span class="property">userAgent</span>; <span class="comment">//取得浏览器的userAgent字符串  </span></span><br><span class="line">    <span class="keyword">var</span> isIE = userAgent.<span class="title function_">indexOf</span>(<span class="string">&quot;compatible&quot;</span>) &gt; -<span class="number">1</span> &amp;&amp; userAgent.<span class="title function_">indexOf</span>(<span class="string">&quot;MSIE&quot;</span>) &gt; -<span class="number">1</span>; <span class="comment">//判断是否IE&lt;11浏览器  </span></span><br><span class="line">    <span class="keyword">var</span> isEdge = userAgent.<span class="title function_">indexOf</span>(<span class="string">&quot;Edge&quot;</span>) &gt; -<span class="number">1</span> &amp;&amp; !isIE; <span class="comment">//判断是否IE的Edge浏览器  </span></span><br><span class="line">    <span class="keyword">var</span> isIE11 = userAgent.<span class="title function_">indexOf</span>(<span class="string">&#x27;Trident&#x27;</span>) &gt; -<span class="number">1</span> &amp;&amp; userAgent.<span class="title function_">indexOf</span>(<span class="string">&quot;rv:11.0&quot;</span>) &gt; -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (isIE) &#123;</span><br><span class="line">        <span class="keyword">var</span> reIE = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;MSIE (\\d+\\.\\d+);&quot;</span>);</span><br><span class="line">        reIE.<span class="title function_">test</span>(userAgent);</span><br><span class="line">        <span class="keyword">var</span> fIEVersion = <span class="built_in">parseFloat</span>(<span class="title class_">RegExp</span>[<span class="string">&quot;$1&quot;</span>]);</span><br><span class="line">        <span class="keyword">if</span> (fIEVersion == <span class="number">7</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fIEVersion == <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fIEVersion == <span class="number">9</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">9</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fIEVersion == <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">6</span>;<span class="comment">//IE版本&lt;=7</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isEdge) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;edge&#x27;</span>;<span class="comment">//edge</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isIE11) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">11</span>; <span class="comment">//IE11  </span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;<span class="comment">//不是ie浏览器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;区分微信和qq</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ua = navigator.<span class="property">userAgent</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line"><span class="keyword">if</span> (ua.<span class="title function_">indexOf</span>(<span class="string">&quot;micromessenger&quot;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//微信</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ua.<span class="title function_">indexOf</span>(<span class="string">&quot;qq&quot;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//QQ</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、number-toLocaleString"><a href="#4、number-toLocaleString" class="headerlink" title="4、number.toLocaleString()"></a>4、number.toLocaleString()</h3><h4 id="toLocaleString-方法可把一个-Number-对象转换为本地格式的字符串，常用于数值转化成千分位，如下："><a href="#toLocaleString-方法可把一个-Number-对象转换为本地格式的字符串，常用于数值转化成千分位，如下：" class="headerlink" title="toLocaleString() 方法可把一个 Number 对象转换为本地格式的字符串，常用于数值转化成千分位，如下："></a>toLocaleString() 方法可把一个 Number 对象转换为本地格式的字符串，常用于数值转化成千分位，如下：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1231231231</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toLocaleString</span>());<span class="comment">//1,231,231,231</span></span><br></pre></td></tr></table></figure><h3 id="5、P标签中不能嵌套块级标签"><a href="#5、P标签中不能嵌套块级标签" class="headerlink" title="5、P标签中不能嵌套块级标签"></a>5、P标签中不能嵌套块级标签</h3><h3 id="6、http请求url传参时的中文编码问题"><a href="#6、http请求url传参时的中文编码问题" class="headerlink" title="6、http请求url传参时的中文编码问题"></a>6、http请求url传参时的中文编码问题</h3><h4 id="项目中遇到在一个url传参的get请求里，安卓机上中文参数会乱码，ios是好的，使用encodeURI-解决了问题，encodeURI-函数可把字符串作为-URI-进行编码，用法如下："><a href="#项目中遇到在一个url传参的get请求里，安卓机上中文参数会乱码，ios是好的，使用encodeURI-解决了问题，encodeURI-函数可把字符串作为-URI-进行编码，用法如下：" class="headerlink" title="项目中遇到在一个url传参的get请求里，安卓机上中文参数会乱码，ios是好的，使用encodeURI()解决了问题，encodeURI() 函数可把字符串作为 URI 进行编码，用法如下："></a>项目中遇到在一个url传参的get请求里，安卓机上中文参数会乱码，ios是好的，使用<code>encodeURI()</code>解决了问题，encodeURI() 函数可把字符串作为 URI 进行编码，用法如下：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">encodeURI(getApp().globalData.hempConfig.agentBasePath+&#x27;/sec/school/getAgentSchoolInfo&#x27;+strParam)</span><br></pre></td></tr></table></figure><h4 id="这样就可以保证中文参数的准确性"><a href="#这样就可以保证中文参数的准确性" class="headerlink" title="这样就可以保证中文参数的准确性"></a>这样就可以保证中文参数的准确性</h4>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js html css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中的Map和Set</title>
      <link href="/2018/07/25/mapset/"/>
      <url>/2018/07/25/mapset/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Map"><a href="#1-Map" class="headerlink" title="1.Map"></a>1.Map</h2><h4 id="Map是一组键值对的结构，具有极快的查找速度，如下："><a href="#Map是一组键值对的结构，具有极快的查找速度，如下：" class="headerlink" title="Map是一组键值对的结构，具有极快的查找速度，如下："></a>Map是一组键值对的结构，具有极快的查找速度，如下：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>(); <span class="comment">// 创建一个空Map</span></span><br><span class="line"><span class="comment">//也可以像这样创建：var m = new Map([[&#x27;Michael&#x27;, 95], [&#x27;Bob&#x27;, 75], [&#x27;Tracy&#x27;, 85]]);</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;leo&#x27;</span>, <span class="number">25</span>); <span class="comment">// 添加新的key-value</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;Bob&#x27;</span>, <span class="number">30</span>);</span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">10</span>, <span class="string">&quot;john&quot;</span>);</span><br><span class="line">m.<span class="title function_">has</span>(<span class="string">&#x27;leo&#x27;</span>); <span class="comment">// 是否存在key &#x27;Adam&#x27;: true</span></span><br><span class="line">m.<span class="title function_">get</span>(<span class="string">&#x27;leo&#x27;</span>); <span class="comment">// 25</span></span><br><span class="line">m.<span class="title function_">delete</span>(<span class="string">&#x27;leo&#x27;</span>); <span class="comment">// 删除key &#x27;leo&#x27;</span></span><br><span class="line">m.<span class="title function_">get</span>(<span class="string">&#x27;leo&#x27;</span>); <span class="comment">// undefined</span></span><br><span class="line">m.<span class="property">size</span>;<span class="comment">// 获取map的长度：2</span></span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="由于一个key只能对应一个value，所以，多次对一个key放入value，后面的value会把之前的覆盖："><a href="#由于一个key只能对应一个value，所以，多次对一个key放入value，后面的value会把之前的覆盖：" class="headerlink" title="由于一个key只能对应一个value，所以，多次对一个key放入value，后面的value会把之前的覆盖："></a>由于一个key只能对应一个value，所以，多次对一个key放入value，后面的value会把之前的覆盖：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;Bob&#x27;</span>, <span class="number">300</span>);</span><br><span class="line">m.<span class="title function_">get</span>(<span class="string">&#x27;Bob&#x27;</span>); <span class="comment">// 300</span></span><br></pre></td></tr></table></figure><h4 id="在Map中，key值可以是任何基本类型-String-Number-Boolean-undefined-NaN…-，或者对象-Map-Set-Object-Function-Symbol-null…"><a href="#在Map中，key值可以是任何基本类型-String-Number-Boolean-undefined-NaN…-，或者对象-Map-Set-Object-Function-Symbol-null…" class="headerlink" title="在Map中，key值可以是任何基本类型(String, Number, Boolean, undefined, NaN….)，或者对象(Map, Set, Object, Function , Symbol , null…)"></a>在Map中，key值可以是任何基本类型(String, Number, Boolean, undefined, NaN….)，或者对象(Map, Set, Object, Function , Symbol , null…)</h4><h2 id="2-Set"><a href="#2-Set" class="headerlink" title="2.Set"></a>2.Set</h2><h4 id="Set和Map类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key"><a href="#Set和Map类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key" class="headerlink" title="Set和Map类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key"></a>Set和Map类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>(); <span class="comment">// 创建一个空Set</span></span><br><span class="line"><span class="comment">//也可以像这样创建：var s2 = new Set([1, 2, 3]);</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;3&#x27;</span>]);<span class="comment">//重复元素在Set中自动被过滤：&#123;1, 2, 3, &quot;3&quot;&#125;</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();<span class="comment">//&#123;&#125;</span></span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">10</span>);<span class="comment">//添加元素</span></span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">100</span>);</span><br><span class="line">s.<span class="title function_">add</span>(<span class="string">&quot;10&quot;</span>);<span class="comment">//&#123;10, 100, &quot;10&quot;&#125;</span></span><br><span class="line">s.<span class="title function_">delete</span>(<span class="number">10</span>);<span class="comment">//删除：&#123;100, &quot;10&quot;&#125;</span></span><br><span class="line">s.<span class="property">size</span>;<span class="comment">//获取长度：2</span></span><br></pre></td></tr></table></figure><h4 id="在Set中，key值可以是任何基本类型-String-Number-Boolean-undefined-NaN…-，或者对象-Map-Set-Object-Function-Symbol-null…"><a href="#在Set中，key值可以是任何基本类型-String-Number-Boolean-undefined-NaN…-，或者对象-Map-Set-Object-Function-Symbol-null…" class="headerlink" title="在Set中，key值可以是任何基本类型(String, Number, Boolean, undefined, NaN….)，或者对象(Map, Set, Object, Function , Symbol , null…)"></a>在Set中，key值可以是任何基本类型(String, Number, Boolean, undefined, NaN….)，或者对象(Map, Set, Object, Function , Symbol , null…)</h4>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react如何在组件外部调用组件内的方法</title>
      <link href="/2018/07/04/reactTechnology/"/>
      <url>/2018/07/04/reactTechnology/</url>
      
        <content type="html"><![CDATA[<h4 id="在开发中，难免会遇到这种场景：我们需要在组件外部调用组件内的方法，从而达到在外部操作组件或者获取组件内部数据的目的。"><a href="#在开发中，难免会遇到这种场景：我们需要在组件外部调用组件内的方法，从而达到在外部操作组件或者获取组件内部数据的目的。" class="headerlink" title="在开发中，难免会遇到这种场景：我们需要在组件外部调用组件内的方法，从而达到在外部操作组件或者获取组件内部数据的目的。"></a>在开发中，难免会遇到这种场景：我们需要在组件外部调用组件内的方法，从而达到在外部操作组件或者获取组件内部数据的目的。</h4><h4 id="示例代码如下："><a href="#示例代码如下：" class="headerlink" title="示例代码如下："></a>示例代码如下：</h4><span id="more"></span><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外层组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Parent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;&#123;&#125;, &#123;&#125;&gt; &#123;</span><br><span class="line">    <span class="comment">//用一个变量接收子组件的this</span></span><br><span class="line">    <span class="keyword">public</span> <span class="attr">child</span>: <span class="built_in">any</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定子组件的this到this.child</span></span><br><span class="line">    bindChild = <span class="function">(<span class="params"><span class="attr">ref</span>:<span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">child</span> = ref;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于调用子组件的方法</span></span><br><span class="line">    click = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">child</span>.<span class="title function_">myName</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Child</span> <span class="attr">bindChild</span>=<span class="string">&#123;this.bindChild&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.click&#125;</span> &gt;</span>getName<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ChildOwnProps</span> &#123;</span><br><span class="line">    <span class="attr">bindChild</span>: <span class="title class_">Function</span>;<span class="comment">//提供一个属性，用于把this传递给外部组件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">ChildOwnProps</span>&gt; &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">props</span>:<span class="title class_">ChildOwnProps</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//传递this</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">bindChild</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//供外部调用的方法</span></span><br><span class="line">    myName = <span class="function">() =&gt;</span> <span class="title function_">alert</span>(<span class="string">&#x27;xiaohesong&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="其实原理很简单，即子组件向外提供一个属性，用于把自己的this传递给外部组件，外部组件用一个变量接收子组件传递过来的this之后就可以随意调用子组件内部的方法。"><a href="#其实原理很简单，即子组件向外提供一个属性，用于把自己的this传递给外部组件，外部组件用一个变量接收子组件传递过来的this之后就可以随意调用子组件内部的方法。" class="headerlink" title="其实原理很简单，即子组件向外提供一个属性，用于把自己的this传递给外部组件，外部组件用一个变量接收子组件传递过来的this之后就可以随意调用子组件内部的方法。"></a>其实原理很简单，即子组件向外提供一个属性，用于把自己的this传递给外部组件，外部组件用一个变量接收子组件传递过来的this之后就可以随意调用子组件内部的方法。</h4>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更新cordova时出现的报错及解决方案</title>
      <link href="/2018/06/08/cordovaUpdate/"/>
      <url>/2018/06/08/cordovaUpdate/</url>
      
        <content type="html"><![CDATA[<h4 id="今天在利用cordova-build安卓apk的时候出现了报错，并且提示更新cordova，于是执行以下命令做更新："><a href="#今天在利用cordova-build安卓apk的时候出现了报错，并且提示更新cordova，于是执行以下命令做更新：" class="headerlink" title="今天在利用cordova build安卓apk的时候出现了报错，并且提示更新cordova，于是执行以下命令做更新："></a>今天在利用cordova build安卓apk的时候出现了报错，并且提示更新cordova，于是执行以下命令做更新：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cordova</span><br></pre></td></tr></table></figure><p>结果出现了报错，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm WARN update-linked node_modules\cordova needs updating to 8.0.0 from 6.4.0 but we can&#x27;t, as it&#x27;s a symlink</span><br></pre></td></tr></table></figure><span id="more"></span><p>在网上查了半天也没找到原因，于是尝试了先去remove再install，结果成功了，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm remove -g cordova</span><br><span class="line">npm install -g cordova</span><br></pre></td></tr></table></figure><p>至于报错的原因，还有待后面研究下…</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何通过url跳转到微信公众号关注页</title>
      <link href="/2018/05/24/wechatFollow/"/>
      <url>/2018/05/24/wechatFollow/</url>
      
        <content type="html"><![CDATA[<h2 id="微信端"><a href="#微信端" class="headerlink" title="微信端"></a>微信端</h2><h4 id="微信端实现相对比较简单，首先需要获取公众号关注页的url，步骤如下："><a href="#微信端实现相对比较简单，首先需要获取公众号关注页的url，步骤如下：" class="headerlink" title="微信端实现相对比较简单，首先需要获取公众号关注页的url，步骤如下："></a>微信端实现相对比较简单，首先需要获取公众号关注页的url，步骤如下：</h4><p>1.点击公众号的历史消息</p><span id="more"></span><p>2.复制链接</p><p>3.接下来在微信里直接跳转这个链接即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&quot;https://mp.weixin.qq.com/mp/profile_ext?action=home&amp;__biz=MzAxNjU0MjEyNA==&amp;scene=123&amp;from=singlemessage&amp;isappinstalled=0#wechat_redirect&quot;</span></span><br></pre></td></tr></table></figure><h2 id="手机QQ"><a href="#手机QQ" class="headerlink" title="手机QQ"></a>手机QQ</h2><p>直接跳转这个链接即可唤起微信：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;weixin://&#x27;</span>;</span><br></pre></td></tr></table></figure><p>但是不能在QQ里跳转微信的那个链接，如下图</p><img src="/2018/05/24/wechatFollow/qq_error.png" class="" title="qq_error"><h2 id="平台的判断"><a href="#平台的判断" class="headerlink" title="平台的判断"></a>平台的判断</h2><p>这里用的到是userAgent，代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ua = navigator.<span class="property">userAgent</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line"><span class="keyword">if</span> (ua.<span class="title function_">indexOf</span>(<span class="string">&quot;micromessenger&quot;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//微信端</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ua.<span class="title function_">indexOf</span>(<span class="string">&quot;qq&quot;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//手机qq</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js promise简例及一些注意点</title>
      <link href="/2018/05/11/jsPromise/"/>
      <url>/2018/05/11/jsPromise/</url>
      
        <content type="html"><![CDATA[<h4 id="无论promise中的执行结果是什么，它总会给你返回一个状态，成功或者失败"><a href="#无论promise中的执行结果是什么，它总会给你返回一个状态，成功或者失败" class="headerlink" title="无论promise中的执行结果是什么，它总会给你返回一个状态，成功或者失败"></a>无论promise中的执行结果是什么，它总会给你返回一个状态，成功或者失败</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装promise</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getURL</span>(<span class="params">URL</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> req = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        req.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="variable constant_">URL</span>, <span class="literal">true</span>);</span><br><span class="line">        req.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (req.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(req.<span class="property">responseText</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(req.<span class="property">statusText</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        req.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(req.<span class="property">statusText</span>));</span><br><span class="line">        &#125;;</span><br><span class="line">        req.<span class="title function_">send</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">URL</span> = <span class="string">&quot;http:***&quot;</span>;</span><br><span class="line"><span class="title function_">getURL</span>(<span class="variable constant_">URL</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//也可以这样写</span></span><br><span class="line"><span class="comment">//getURL(URL).then(function(value) &#123;</span></span><br><span class="line"><span class="comment">//    console.log(value);</span></span><br><span class="line"><span class="comment">//&#125;, function(error)&#123;</span></span><br><span class="line"><span class="comment">//    console.error(error);</span></span><br><span class="line"><span class="comment">//&#125;)</span></span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="在angularjs中可以通过-q实现异步操作："><a href="#在angularjs中可以通过-q实现异步操作：" class="headerlink" title="在angularjs中可以通过$q实现异步操作："></a>在angularjs中可以通过$q实现异步操作：</h4><p>通过调用  $q.defer() 可以构建一个新的 deffered 实例,deffered 对象用来将 Promise 实例与 标记任务状态(执行成功还是不成功)的 API 相关联，<br>deffered 对象的方法</p><blockquote><ul><li>resolve(value) ——成功，如果 value 是一个通过 $q.reject 构造的拒绝对象(rejection) , 该promise 将被拒绝。</li><li>reject(reason) ——失败，这相当于通过 $q.reject构造的拒绝对象(rejection)作为参数传递给 resolve。</li><li>notify(value)  ——在 promise 执行的过程中提供状态更新。 这在 promise 被解决或拒绝之前可能会被多次调用。</li></ul></blockquote><p>例子如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装promise</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">asyncGreet</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> deferred = $q.<span class="title function_">defer</span>();</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        deferred.<span class="title function_">notify</span>(<span class="string">&#x27;即将问候 &#x27;</span> + name + <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">okToGreet</span>(name)) &#123;</span><br><span class="line">            deferred.<span class="title function_">resolve</span>(<span class="string">&#x27;你好, &#x27;</span> + name + <span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            deferred.<span class="title function_">reject</span>(<span class="string">&#x27;拒绝问候 &#x27;</span> + name + <span class="string">&#x27; .&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> deferred.<span class="property">promise</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line"><span class="keyword">var</span> promise = <span class="title function_">asyncGreet</span>(<span class="string">&#x27;***&#x27;</span>);</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">update</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;);  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20180504随笔</title>
      <link href="/2018/05/04/20180504Essay/"/>
      <url>/2018/05/04/20180504Essay/</url>
      
        <content type="html"><![CDATA[<h3 id="3月份的时候了解到了Hexo，感觉还是挺有意思的，主要是很多东西需要自己折腾，而且比博客园要好看很多，就折腾了下；"><a href="#3月份的时候了解到了Hexo，感觉还是挺有意思的，主要是很多东西需要自己折腾，而且比博客园要好看很多，就折腾了下；" class="headerlink" title="3月份的时候了解到了Hexo，感觉还是挺有意思的，主要是很多东西需要自己折腾，而且比博客园要好看很多，就折腾了下；"></a>3月份的时候了解到了Hexo，感觉还是挺有意思的，主要是很多东西需要自己折腾，而且比博客园要好看很多，就折腾了下；</h3><span id="more"></span><h3 id="其实很久都不更新博客了，3月至5月这个项目确实也没啥要记的，都是业务逻辑，也可能是自己越来越懒了，以后要养成好习惯，不论是知识点，难点还是开发中的报错，都要记录一下；"><a href="#其实很久都不更新博客了，3月至5月这个项目确实也没啥要记的，都是业务逻辑，也可能是自己越来越懒了，以后要养成好习惯，不论是知识点，难点还是开发中的报错，都要记录一下；" class="headerlink" title="其实很久都不更新博客了，3月至5月这个项目确实也没啥要记的，都是业务逻辑，也可能是自己越来越懒了，以后要养成好习惯，不论是知识点，难点还是开发中的报错，都要记录一下；"></a>其实很久都不更新博客了，3月至5月这个项目确实也没啥要记的，都是业务逻辑，也可能是自己越来越懒了，以后要养成好习惯，不论是知识点，难点还是开发中的报错，都要记录一下；</h3><h3 id="得抓紧时间落实一下FD的事情；"><a href="#得抓紧时间落实一下FD的事情；" class="headerlink" title="得抓紧时间落实一下FD的事情；"></a>得抓紧时间落实一下FD的事情；</h3><h3 id="没事就练练车，提高下车技；"><a href="#没事就练练车，提高下车技；" class="headerlink" title="没事就练练车，提高下车技；"></a>没事就练练车，提高下车技；</h3>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React的Ref属性在TypeScript中的写法</title>
      <link href="/2018/05/04/reactRefs/"/>
      <url>/2018/05/04/reactRefs/</url>
      
        <content type="html"><![CDATA[<h4 id="在TypeScript中使用ref属性的时候，如果不定义它的类型直接去使用this-refs-XXX，就会在编译的时候报错。参考如下代码："><a href="#在TypeScript中使用ref属性的时候，如果不定义它的类型直接去使用this-refs-XXX，就会在编译的时候报错。参考如下代码：" class="headerlink" title="在TypeScript中使用ref属性的时候，如果不定义它的类型直接去使用this.refs.XXX，就会在编译的时候报错。参考如下代码："></a>在TypeScript中使用ref属性的时候，如果不定义它的类型直接去使用this.refs.XXX，就会在编译的时候报错。参考如下代码：</h4><span id="more"></span><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CustomTextInput</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;&#123;&#125;, &#123;&#125;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在此处统一定义refs</span></span><br><span class="line">    <span class="keyword">public</span> <span class="attr">refs</span>: &#123;</span><br><span class="line">        <span class="attr">textInput</span>: <span class="title class_">HTMLInputElement</span>,</span><br><span class="line">        <span class="attr">loadMoreDiv</span>: <span class="title class_">HTMLElement</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> loadMore = <span class="variable language_">this</span>.<span class="property">refs</span>.<span class="property">loadMoreDiv</span>;</span><br><span class="line">        <span class="keyword">const</span> myInput = <span class="variable language_">this</span>.<span class="property">refs</span>.<span class="property">textInput</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>= <span class="string">&quot;textInput&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>= <span class="string">&quot;loadMoreDiv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转自：<a href="https://goenning.net/2016/11/02/strongly-typed-react-refs-with-typescript/">Strongly Typed React Refs with TypeScript</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用小记</title>
      <link href="/2018/05/04/Hexo/"/>
      <url>/2018/05/04/Hexo/</url>
      
        <content type="html"><![CDATA[<h3 id="1-关于部署到github时用户名密码报错的问题"><a href="#1-关于部署到github时用户名密码报错的问题" class="headerlink" title="1.  关于部署到github时用户名密码报错的问题"></a>1.  关于部署到github时用户名密码报错的问题</h3><p>刚开始部署的配置如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:   </span><br><span class="line">    type: git   </span><br><span class="line">    repo: https://github.com/&#123;yourname&#125;/&#123;yourname&#125;.github.io.git   </span><br><span class="line">    branch: master</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果会报没有用户名密码的错误，大致如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fatal: could not read Username for &#x27;GitHub · Where software is built&#x27;: No error</span><br><span class="line">FATAL Something&#x27;s wrong. Maybe you can find the solution here: Troubleshooting</span><br><span class="line">Error: bash: /dev/tty: No such device or address</span><br><span class="line">error: failed to execute prompt script (exit code 1)</span><br><span class="line">fatal: could not read Username for &#x27;GitHub · Where software is built&#x27;: No erro</span><br></pre></td></tr></table></figure><p>解决办法为修改配置为如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:    </span><br><span class="line">    type: git   </span><br><span class="line">    repo: https://&#123;yourname&#125;:&#123;yourpassword&#125;@github.com/&#123;yourname&#125;/&#123;yourname&#125;.github.io.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><p>转自：<a href="https://www.zhihu.com/question/38219432">有关使用 Hexo 和 GitHub 搭建博客，出现 hexo -d 报错如何解决？</a></p><h3 id="2-配置文件一定要指明language"><a href="#2-配置文件一定要指明language" class="headerlink" title="2.  配置文件一定要指明language"></a>2.  配置文件一定要指明language</h3><span id="more"></span><h3 id="3-集成disqus评论功能"><a href="#3-集成disqus评论功能" class="headerlink" title="3.  集成disqus评论功能"></a>3.  集成disqus评论功能</h3><p>进入disqus官网，点击红色框中链接，给自己的网站添加disqus，如下图</p><img src="/2018/05/04/Hexo/disqus_create_new.png" class="" title="disqus_create_new"><p>接着输入你的网址，选择类别，生成shortname</p><img src="/2018/05/04/Hexo/disqus_form.png" class="" title="disqus_form"><p>拿到shortname，分别添加到站点配置文件的disqus_shortname和主题配置文件的disqus中的shortname，并且将主题配置文件disqus的enable设为true</p><h3 id="4-如何给文章的md文件中插入图片"><a href="#4-如何给文章的md文件中插入图片" class="headerlink" title="4.  如何给文章的md文件中插入图片"></a><del>4.  如何给文章的md文件中插入图片</del></h3><s>把站点配置文件的post_asset_folder设置为true；<p>接着执行命令，来自<a href="https://github.com/CodeFalling/hexo-asset-image">hexo-asset-image</a>；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>安装好之后，在用<code>hexo n xxx</code>创建新文档的时候，&#x2F;source&#x2F;_posts文件夹内除了xxx.md文件还会有一个同名的文件夹，这个文件夹就是用来存放图片的；</p><p>最后在xxx.md中想引入图片时先，先把图片复制到xxx文件夹中，接下来直接在xxx.md中按照markdown的格式引入图片：<code>![你想输入的替代文字](xxxx/图片名.jpg)</code>即可</p><p>转自：<a href="https://blog.csdn.net/sugar_rainbow/article/details/57415705">hexo生成博文插入图片</a><br></s></p><h3 id="5-设置阅读全文"><a href="#5-设置阅读全文" class="headerlink" title="5.  设置阅读全文"></a>5.  设置阅读全文</h3><p>根据文章的内容，自己在合适的位置添加 &lt;!–more–&gt;标签，使用灵活，也是Hexo推荐的方法</p><h3 id="6-使用local-search为站点增加搜索功能"><a href="#6-使用local-search为站点增加搜索功能" class="headerlink" title="6.  使用local_search为站点增加搜索功能"></a>6.  使用local_search为站点增加搜索功能</h3><p>安装 hexo-generator-search，在站点的根目录下执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>编辑 站点配置文件，新增以下内容到任意位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><p>修改主题配置文件中local_search的enable为true即可</p><p>转自：<a href="https://blog.csdn.net/qq_40265501/article/details/80030627">hexo博客添加搜索功能</a></p><h3 id="持续补充中。。。"><a href="#持续补充中。。。" class="headerlink" title="持续补充中。。。"></a>持续补充中。。。</h3>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
